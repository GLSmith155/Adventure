Object subclass: #Command	instanceVariableNames: 'commandWord arguments'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!Command methodsFor: 'override'!executeInGame: aGame	self subclassResponsibility! !!Command methodsFor: 'initialization'!arguments: anObject	arguments := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Command class	instanceVariableNames: ''!!Command class methodsFor: 'instance creation'!parse: aString	| tokens commandClass |	tokens := aString substrings: ' '.	commandClass := self allSubclasses		                detect: [ :each | each commandWord = tokens first ]		                ifNone: [ InvalidCommand ].	^ commandClass new		 		  arguments: tokens allButFirst;		  yourself! !Command subclass: #DropCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!DropCommand methodsFor: 'override'!executeInGame: aGame	^aGame drop! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DropCommand class	instanceVariableNames: ''!!DropCommand class methodsFor: 'accessing'!commandWord	^'drop'! !Object subclass: #Game	instanceVariableNames: 'time player timeTracker hours'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!Game methodsFor: 'command execution'!search	^player search! !!Game methodsFor: 'command execution'!invalidCommand	^'Invalid command'! !!Game methodsFor: 'command execution'!explore	^player explore! !!Game methodsFor: 'command execution'!look	^player look! !!Game methodsFor: 'command execution'!interact	^player interact! !!Game methodsFor: 'command execution'!go: aDirection	player go: aDirection.	^player look! !!Game methodsFor: 'command execution'!drop	^player drop! !!Game methodsFor: 'command execution'!loot	^player loot! !!Game methodsFor: 'initialization'!initializeStartLocation: aLocation   timeTracker := TimeTracker new.	player := Player location: aLocation.	hours := 1! !!Game methodsFor: 'accessing'!time	| hourStr |	hourStr := (hours \\ 12) asString padded: #left to: 2 with: $0.	hourStr := (hours > 12) ifTrue: [hourStr , ' PM'] ifFalse: [hourStr , ' AM'].	^ hourStr! !!Game methodsFor: 'as yet unclassified'!executeCommand: aCommand	| result |	result := aCommand executeInGame: self.	hours := hours + 1.	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Game class	instanceVariableNames: ''!!Game class methodsFor: 'instance creation'!startLocation: aLocation	^self new initializeStartLocation: aLocation! !!Game class methodsFor: 'sample games'!Fallout| goodspringsPrimm primmMojaveOutpost primmBisonSteve novac newVegas |goodspringsPrimm := Location new                    description: 'The quiet town of Goodsprings';                    yourself.primmMojaveOutpost := Location new                      description: 'The Mojave Outpost, a small NCR checkpoint';                      yourself.primmBisonSteve := Location new                   description: 'The Bison Steve Hotel, now infested with raiders';                   yourself.novac := Location new         description: 'The Dino Dee-lite Motel, the home of the infamous "No-Bark" Noonan';         yourself.newVegas := Location new            description: 'The shining jewel of the Mojave, where fortunes are won and lost';            yourself.goodspringsPrimm    addExit: primmMojaveOutpost direction: 'south';    addExit: primmBisonSteve direction: 'east';    addExit: newVegas direction: 'northwest'.primmMojaveOutpost    addExit: goodspringsPrimm direction: 'north';    addExit: novac direction: 'east'.primmBisonSteve    addExit: goodspringsPrimm direction: 'west';    addExit: newVegas direction: 'southwest'.novac addExit: primmMojaveOutpost direction: 'west'.newVegas    addExit: goodspringsPrimm direction: 'southeast';    addExit: novac direction: 'west';    addExit: primmBisonSteve direction: 'northwest'.^ self startLocation: goodspringsPrimm! !!Game class methodsFor: 'sample games'!skyrim	| riverwoodSouth riverwoodNorth riverwoodTrader |	riverwoodSouth := Location new		                  description: 'South end of Riverwood';		                  yourself.	riverwoodNorth := Location new		                  description: 'North end of Riverwood';		                  yourself.	riverwoodTrader := Location new		                   description:			                   'The Riverwood Trader.  Sell all of your useless gear here!!';		                   yourself.	riverwoodSouth		addExit: riverwoodNorth direction: 'north';		addExit: riverwoodTrader direction: 'east'.	riverwoodNorth addExit: riverwoodSouth direction: 'south'.	riverwoodTrader addExit: riverwoodSouth direction: 'out'.	^ self startLocation: riverwoodSouth! !Command subclass: #GoCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!GoCommand methodsFor: 'executing'!executeInGame: aGame	^ aGame go: arguments first! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GoCommand class	instanceVariableNames: ''!!GoCommand class methodsFor: 'accessing'!commandWord	^'go'! !Command subclass: #InteractCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!InteractCommand methodsFor: 'executing'!executeInGame: aGame	^aGame interact! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InteractCommand class	instanceVariableNames: ''!!InteractCommand class methodsFor: 'accessing'!commandWord	^'interact'! !Command subclass: #InvalidCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!InvalidCommand methodsFor: 'executing'!executeInGame: aGame	^aGame invalidCommand! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InvalidCommand class	instanceVariableNames: ''!!InvalidCommand class methodsFor: 'accessing'!commandWord	^'invalid'! !Object subclass: #Location	instanceVariableNames: 'exits description bottlecaps npc'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!Location methodsFor: 'initialization'!initialize	super initialize.	exits := Dictionary new.	bottlecaps := 3.! !!Location methodsFor: 'accessing'!description	^ description! !!Location methodsFor: 'accessing'!description: anObject	description := anObject! !!Location methodsFor: 'accessing'!npc	^ npc! !!Location methodsFor: 'accessing'!bottlecaps	^ bottlecaps! !!Location methodsFor: 'accessing'!bottlecaps: anInteger	bottlecaps := anInteger.! !!Location methodsFor: 'accessing'!npc: anNPC	npc := anNPC! !!Location methodsFor: 'exits'!addExit: anExit direction: aDirection	exits at: aDirection put: anExit	! !!Location methodsFor: 'exits'!exitNames	^ exits keys asSet! !!Location methodsFor: 'exits'!exitInDirection: aDirection    ^exits at: aDirection	! !Command subclass: #LookCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!LookCommand methodsFor: 'executing'!executeInGame: aGame	^aGame look! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LookCommand class	instanceVariableNames: ''!!LookCommand class methodsFor: 'accessing'!commandWord	^'look'! !Command subclass: #LootCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!LootCommand methodsFor: 'executing'!executeInGame: aGame	^aGame loot! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LootCommand class	instanceVariableNames: ''!!LootCommand class methodsFor: 'accessing'!commandWord	^'loot'! !Object subclass: #NPC	instanceVariableNames: 'name location'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!NPC methodsFor: 'actions'!describe	^ 'You see ' , name! !!NPC methodsFor: 'actions'!moveToRandomLocation	| directions |	directions := location exitNames.	self location: (location exitInDirection: (directions atRandom))! !!NPC methodsFor: 'accessing'!location: aLocation    location := aLocation! !!NPC methodsFor: 'accessing'!name: aName    name := aName! !!NPC methodsFor: 'accessing'!location	^ location! !!NPC methodsFor: 'accessing'!name	^ name! !!NPC methodsFor: 'initialization'!initializeWithName: aName location: aLocation	name := aName.	location := aLocation.! !Object subclass: #Player	instanceVariableNames: 'location bottlecaps inventory slotmachine timeTracker timetracker'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!Player methodsFor: 'initialization'!initializeLocation: aLocation	location := aLocation.	! !!Player methodsFor: 'initialization'!initializeBottleCaps: allBottleCaps	bottlecaps := 0.	! !!Player methodsFor: 'initialization'!initialize	super initialize.	bottlecaps := 0.! !!Player methodsFor: 'accessing'!bottlecaps	^ bottlecaps! !!Player methodsFor: 'accessing'!bottlecaps: anInteger	bottlecaps := anInteger.! !!Player methodsFor: 'private'!describeExitsOn: wslocation exitNames		ifEmpty: [ ws nextPutAll: 'No exits' ]		ifNotEmpty: [ 			ws				nextPutAll: 'Exits:';				cr.			location exitNames				do: [ :e | ws nextPutAll: e ]				separatedBy: [ ws nextPutAll: ', ' ] ].! !!Player methodsFor: 'actions'!search	| ws temp temp2|	   temp := self bottlecaps + location bottlecaps.   temp2 := location bottlecaps.   bottlecaps := temp.   location bottlecaps: 0.	ws := String new writeStream.	ws		nextPutAll: location description;		cr;		nextPutAll: 'You found ', temp2 asString, ' bottlecaps at the location.'; 		cr;  "<-- new line"		nextPutAll: 'You now have ', temp asString, ' bottlecaps!!';		cr.	self describeExitsOn: ws.	^ ws contents! !!Player methodsFor: 'actions'!look	| ws |	ws := String new writeStream.	ws		nextPutAll: location description;		cr;		nextPutAll: '     ', bottlecaps asString, ' bottlecaps.' ;   "<-- new line"		cr.		location description = 'The shining jewel of the Mojave, where fortunes are won and lost'		ifTrue: [ws		cr;		nextPutAll: 'You see a slot machine, type interact to use it!!';		cr].	self describeExitsOn: ws.	^ ws contents! !!Player methodsFor: 'actions'!interact   |  result |	(location description = 'The shining jewel of the Mojave, where fortunes are won and lost') ifTrue: [		(bottlecaps >= 3) ifTrue: [			| change |			change := ((1 to: 2) atRandom = 1) ifTrue: [3] ifFalse: [-3].			bottlecaps := bottlecaps + change.			result := 'You pull the lever of the slot machine: ' , (change > 0 ifTrue: ['You won 3 bottlecaps!!'] ifFalse: ['You lost 3 bottlecaps!!'])		] ifFalse: [			result := 'You need at least 3 bottlecaps to play.'		].	] ifFalse: [		result := 'You can''t use that here.'	].	^ result	! !!Player methodsFor: 'actions'!go: aDirection	location := location exitInDirection: aDirection! !!Player methodsFor: 'actions'!drop	| ws temp|	   temp := self bottlecaps + location bottlecaps.   location bottlecaps: temp.   bottlecaps := 0.	ws := String new writeStream.	ws		nextPutAll: location description;		cr;		nextPutAll: 'You have dropped ', location bottlecaps asString, ' bottlecaps.'; 		cr;  "<-- new line"		nextPutAll: 'You now have ', 0 asString, ' bottlecaps.';		cr.	self describeExitsOn: ws.	^ ws contents! !!Player methodsFor: 'actions'!loot	| ws temp temp2|	   temp := self bottlecaps + location bottlecaps.   temp2 := location bottlecaps.   bottlecaps := temp.   location bottlecaps: 0.	ws := String new writeStream.	ws		nextPutAll: location description;		cr;		nextPutAll: 'You found ', temp2 asString, ' bottlecaps at the location.'; 		cr;  "<-- new line"		nextPutAll: 'You now have ', temp asString, ' bottlecaps!!';		cr.	^ ws contents! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Player class	instanceVariableNames: ''!!Player class methodsFor: 'instance creation'!location: aLocation	^self new initializeLocation: aLocation! !Command subclass: #SearchCommand	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!SearchCommand methodsFor: 'executing'!executeInGame: aGame	^aGame search! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SearchCommand class	instanceVariableNames: ''!!SearchCommand class methodsFor: 'accessing'!commandWord	^'search'! !Object subclass: #SlotMachine	instanceVariableNames: 'player location result'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!SlotMachine methodsFor: 'accessing'!result	(location description = 'The shining jewel of the Mojave, where fortunes are won and lost') ifTrue: [		(player bottlecaps >= 3) ifTrue: [			| change |			change := ((1 to: 2) atRandom = 1) ifTrue: [3] ifFalse: [-3].			player bottlecaps: player bottlecaps + change.			result := 'You pull the lever of the slot machine: ' , (change > 0 ifTrue: ['You won 3 bottlecaps!!'] ifFalse: ['You lost 3 bottlecaps!!'])		] ifFalse: [			result := 'You need at least 3 bottlecaps to play.'		].	] ifFalse: [		result := 'You can''t use that here.'	].	^ result! !!SlotMachine methodsFor: 'initialize'!initializeLocation: aLocation	location := aLocation.! !!SlotMachine methodsFor: 'initialize'!initializeBottleCaps: allBottleCaps	player bottlecaps: allBottleCaps	! !Object subclass: #TimeTracker	instanceVariableNames: 'time'	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!TimeTracker methodsFor: 'initialize'!printTime    Transcript show: 'Current time: ', time; cr.! !!TimeTracker methodsFor: 'initialize'!initialize    time := '1:00 pm'! !!TimeTracker methodsFor: 'accessing'!advanceTimeBy: hours    | currentHour hourString |    currentHour := (time asTime).    hourString := ((currentHour asNumber + hours) \\ 24) printString, ':00 '.    time := Time readFrom: hourString, (time copyFrom: 6 to: 7).! !!TimeTracker methodsFor: 'accessing'!currentTime	^ time! !Object subclass: #UnknownDirection	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!UnknownDirection methodsFor: 'description'!description	^ 'The specified direction is not a valid exit.'! !!UnknownDirection methodsFor: 'signalling'!signal	^ self signal: self new! !Object subclass: #UnknownDirectionException	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3220-Adventure-Core'!!UnknownDirectionException methodsFor: 'description'!description	^ 'The specified direction is not a valid exit.'! !